@using Umbraco.Cms.Web.Common.PublishedModels;
@inherits Umbraco.Cms.Web.Common.Views.UmbracoViewPage

@{
	Layout = null;
}

<!DOCTYPE html>
<html lang="en">

<head>
    @await Html.PartialAsync("metadata")

    <!-- Favicons -->
    <link href="assets/img/favicon.png" rel="icon">
    <link href="assets/img/apple-touch-icon.png" rel="apple-touch-icon">

    <!-- Fonts -->
    <link href="https://fonts.googleapis.com" rel="preconnect">
    <link href="https://fonts.gstatic.com" rel="preconnect" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Roboto:ital,wght@0,100;0,300;0,400;0,500;0,700;0,900;1,100;1,300;1,400;1,500;1,700;1,900&family=Open+Sans:ital,wght@0,300;0,400;0,500;0,600;0,700;0,800;1,300;1,400;1,500;1,600;1,700;1,800&family=Montserrat:ital,wght@0,100;0,200;0,300;0,400;0,500;0,600;0,700;0,800;0,900;1,100;1,200;1,300;1,400;1,500;1,600;1,700;1,800;1,900&display=swap" rel="stylesheet">

    <!-- Vendor CSS Files -->
    <link href="assets/vendor/bootstrap/css/bootstrap.min.css" rel="stylesheet">
    <link href="assets/vendor/bootstrap-icons/bootstrap-icons.css" rel="stylesheet">
    <link href="assets/vendor/aos/aos.css" rel="stylesheet">
    <link href="assets/vendor/glightbox/css/glightbox.min.css" rel="stylesheet">
    <link href="assets/vendor/swiper/swiper-bundle.min.css" rel="stylesheet">

    <!-- Main CSS File -->
    <link href="assets/css/main.css" rel="stylesheet">

    <!-- =======================================================
    * Template Name: BizLand
    * Template URL: https://bootstrapmade.com/bizland-bootstrap-business-template/
    * Updated: Aug 07 2024 with Bootstrap v5.3.3
    * Author: BootstrapMade.com
    * License: https://bootstrapmade.com/license/
    ======================================================== -->
</head>

<body class="index-page">
    <!-- Header Section -->
    @await Html.PartialAsync("header")

    @RenderBody()

    <!-- Footer Section -->
    @await Html.PartialAsync("footer", Model)

    <!-- Scroll Top -->
    @await Html.PartialAsync("scrolltop")

    <!-- Whatsapp Icon -->
    @await Html.PartialAsync("floatingwhatsappIcon", Model)


    <!-- Vendor JS Files -->
    <script src="assets/vendor/bootstrap/js/bootstrap.bundle.min.js"></script>
    <script src="assets/vendor/php-email-form/validate.js"></script>
    <script src="assets/vendor/aos/aos.js"></script>
    <script src="assets/vendor/glightbox/js/glightbox.min.js"></script>
    <script src="assets/vendor/waypoints/noframework.waypoints.js"></script>
    <script src="assets/vendor/purecounter/purecounter_vanilla.js"></script>
    <script src="assets/vendor/swiper/swiper-bundle.min.js"></script>
    <script src="assets/vendor/imagesloaded/imagesloaded.pkgd.min.js"></script>
    <script src="assets/vendor/isotope-layout/isotope.pkgd.min.js"></script>

    <!-- Main JS File -->
    <script src="assets/js/main.js"></script>

    <!-- Language Switcher Script -->
    <script>
        async function loadTranslations() {
            try {
                const response = await fetch('translations/index.json'); // Fetch the JSON file

                if (!response.ok) {
                    throw new Error('Network response was not ok ' + response.statusText);
                }

                const data = await response.json(); // Parse the JSON data

                return data; // Return the parsed data
            } catch (error) {
                console.error('There has been a problem with your fetch operation:', error);
            }
        }


        async function setLanguage(lang) {
            // Use an immediately invoked function expression (IIFE) to call the async function and assign its result
            const translations = await loadTranslations(); // Assign fetched data to `translations`

            console.log(translations); // Example output: { greeting: "Hello", farewell: "Goodbye" }

            document.documentElement.lang = lang;
            document.body.dir = lang === 'ar' ? 'rtl' : 'ltr';

            for (const key in translations[lang]) {
                document.querySelectorAll(`[data-translate="${key}"]`).forEach(el => {
                    el.textContent = translations[lang][key];
                });
            }
        }

        document.addEventListener("DOMContentLoaded", () => {
            let lang = 'en';
            setLanguage(lang); // Set default language to English

        });
    </script>

</body>

</html>